"""Add userlogin

Revision ID: 1db2884ee99a
Revises: ef16c462518c
Create Date: 2023-10-23 23:32:22.301605

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1db2884ee99a'
down_revision = 'ef16c462518c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('desc', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=200), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('login', name=op.f('uq_users_login'))
    )
    # ### end Alembic commands ###
    roles_data_upgrades()
    users_data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###

def roles_data_upgrades():
    """Add any optional data upgrade migrations here!"""
    table = sa.sql.table('roles', sa.sql.column('name', sa.String), sa.sql.column('desc', sa.String))
    op.bulk_insert(table,
        [
            {'name': 'Администратор', 'desc': 'Суперпользователь, имеет полный доступ к системе.'},
            {'name': 'Пользователь', 'desc': 'Учетная запись этого пользователя ограниченна в правах использования функционала приложения.'},
        ]
    )

from werkzeug.security import generate_password_hash
def users_data_upgrades():
    """Add any optional data upgrade migrations here!"""
    table = sa.sql.table('users', sa.sql.column('login', sa.String), sa.sql.column('password_hash', sa.String),sa.sql.column('last_name', sa.String),
        sa.sql.column('first_name', sa.String), sa.sql.column('middle_name', sa.String), sa.sql.column('role_id', sa.Integer))
    op.bulk_insert(table,
        [
            {'login': 'user1', 'password_hash': generate_password_hash('qwerty'), 'last_name': 'Иванов', 'first_name': 'Иван', 'middle_name': 'Иванович', 'role_id': 1},
            {'login': 'user2', 'password_hash': generate_password_hash('qwerty'), 'last_name': 'Петров', 'first_name': 'Петр', 'middle_name': 'Петрович', 'role_id': 2},
        ]
    )